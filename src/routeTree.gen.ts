/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as AuthImport } from './routes/_auth'
import { Route as AuthenticatedIndexImport } from './routes/_authenticated.index'
import { Route as AuthenticatedStorageImport } from './routes/_authenticated.storage'
import { Route as AuthenticatedSettingsImport } from './routes/_authenticated.settings'
import { Route as AuthenticatedSplatImport } from './routes/_authenticated.$'
import { Route as AuthLoginImport } from './routes/_auth.login'

// Create Virtual Routes

const AuthenticatedSettingsTabIdLazyImport = createFileRoute(
  '/_authenticated/settings/$tabId',
)()

// Create/Update Routes

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedIndexRoute = AuthenticatedIndexImport.update({
  path: '/',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedStorageRoute = AuthenticatedStorageImport.update({
  path: '/storage',
  getParentRoute: () => AuthenticatedRoute,
} as any).lazy(() =>
  import('./routes/_authenticated.storage.lazy').then((d) => d.Route),
)

const AuthenticatedSettingsRoute = AuthenticatedSettingsImport.update({
  path: '/settings',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedSplatRoute = AuthenticatedSplatImport.update({
  path: '/$',
  getParentRoute: () => AuthenticatedRoute,
} as any).lazy(() =>
  import('./routes/_authenticated.$.lazy').then((d) => d.Route),
)

const AuthLoginRoute = AuthLoginImport.update({
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any)

const AuthenticatedSettingsTabIdLazyRoute =
  AuthenticatedSettingsTabIdLazyImport.update({
    path: '/$tabId',
    getParentRoute: () => AuthenticatedSettingsRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated.settings.$tabId.lazy').then((d) => d.Route),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated': {
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/_auth/login': {
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof AuthImport
    }
    '/_authenticated/$': {
      preLoaderRoute: typeof AuthenticatedSplatImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/settings': {
      preLoaderRoute: typeof AuthenticatedSettingsImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/storage': {
      preLoaderRoute: typeof AuthenticatedStorageImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/': {
      preLoaderRoute: typeof AuthenticatedIndexImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/settings/$tabId': {
      preLoaderRoute: typeof AuthenticatedSettingsTabIdLazyImport
      parentRoute: typeof AuthenticatedSettingsImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  AuthRoute.addChildren([AuthLoginRoute]),
  AuthenticatedRoute.addChildren([
    AuthenticatedSplatRoute,
    AuthenticatedSettingsRoute.addChildren([
      AuthenticatedSettingsTabIdLazyRoute,
    ]),
    AuthenticatedStorageRoute,
    AuthenticatedIndexRoute,
  ]),
])

/* prettier-ignore-end */
